Begriffe
--------
Netz - Verbund von Controllern (Netzteilnehmer), welche miteinander kommunizieren koennen.
Segment - Ein Teil eines Netzes mit gleicher Bustopologie z.B. ein RS485 Bus
Router - Verbindet mehrere Segmente der gleicher oder unterschiedlicher Topologie.

Anforderungen
-------------
Alle Netzteilnehmer koennen miteinander kommunizieren.
Netzsegmente koennen ueber Routercontroller miteinander verbunden werden.
Alle Netzteilnehmer haben eine eindeutige Adresse.


Netzaufbau
----------

Die Kommunikationsgeschwindigkeit beträgt: 38400 baud, 8 Datenbits, keine Parität, 1 Stopbit

Kommunikationsablauf:

1) Zu Beginn sendet der Master das Token fuer den ersten Sender.
2) Der angesprochene Sender sendet daraufhin seine Nachricht. Wenn er nichts zu senden hat sendet er eine leere Nachricht.
3) Der Master sendet das Token fuer den naechsten Sender.
4) Der naechste Sender sendet seine Nachricht.
5) Und so weiter.
6) Wenn alle Teilnehmer angeprochen wurden, gibt es eine Pause in der Länge entsprechend 3Bytes.
7) Nach zehn Runden mit nur leeren Nachrichten legt sich der Scheduler schlafen. Wenn ein Slave nach einer Sekunde kein Byte mehr empfängt legt er sich auch schlafen.
8) Der Scheduler und alle anderen Busteilnehmer wachen auf sobald ein beliebiges Byte gesendet wurde. Der Inhalt dieses Bytes wird nicht ausgewerfet und verworfen, da der korrekte Empfang nich garantiert ist und es sein kann, daß das 'Weckbyte' von mehreren Sender gleichzeitig gesendet wird).

Teilnehmererkennung:

Zu Beginn pollt der Scheduler alle auf dem Segment möglichen Adressen. Ist auf ein Token in drei aufeinender folgenden
Runden nicht geantwortet worden, wird diese Adresse als 'nicht belegt' geführt. Wird auf ein bisher nicht belegtes Token geantwortet, wird die Adresse sofort in die Liste der belegten Adressen verschoben.
Nachdem das Segment erkundet ist werden jeweils alle belegten Adressen reihum abgefragt und anschließend eine der nicht belegten Adressen.
Beisp.:  Adressen belegt: 1,7,9,15
Polling: 1-7-9-15- 2 -1-7-9-15- 3 -1-7-9-15- 4 -1-7-...

Fehlersituationen:

 * Ein Sender sendet nicht, nachdem das Token verschickt wurde:
   Jeder Sender muss innerhalb von 2Bytes Sendezeit auf das Token antworten, ansonsten wird nach einer Pause von einem
   weiteren Byte mit dem nächsten Token weitergemacht. Damit sieht es auf dem Bus so aus, wie eine neue Runde Kommunikation.
 * Der Master faellt aus:
   Der Master kann mit einer Nachricht Stellvertreter ernennen. Wird innerhalb von 10Bytes Sendezeit kein Token empfangen,
   uebernimmt der Vertreter das Takten des Busses.


Nachrichtenformate auf dem Bus
-------------------------------

Token:

+--+--+
|SY|TS|
+--+--+
SY - Syncronization byte: 'Ü' = 0b10011010
TS - Token for next sender. MSB=1 lower 7bit = address of next sender.


Nachricht:

+--+--+--+--+--+---------+----+----+                 +---+
|SY|AS|LE|AR|EA|MD ... MD|CRCH|CRCL|   vom Empfänger |ACK|
+--+--+--+--+--+---------+----+----+                 +---+

SY - Syncronization byte: 'Ü' = 0b10011010 = 0x9A
AS - Address sender on bus 7bit
LE - Length of message from AR to CRCL
AR - Address receiver 7bit
EA - Extended address 4bit sender in higher nibble, 4bit receiver in lower nibble.
MD - Message data
CRCH - High byte of 16bit CRC
CRCL - Low byte of 16bit CRC


Acknowledge / Not Acknowledge:

Das Acknowledge oder Not Acknowledge wird vom Empänger einer Nachricht unmittelbar nach deren Erhalt gesendet.
Der Empfänger sendet "Acknowledge" / ACK , wenn er die Nachricht vollständig und fehlerfrei (CRCCheck) empfangen hat und an die Applikationsebene weiterreichen konnte.
Der Empfänger sendet ein "Not Acknowledge" / NAK wenn er die Nachricht nicht fehlerfei empfangen konnte. Wenn der Sender ein NAK empfängt, wiederholt er das Senden der Nachricht. Wenn der Sender nach einer Wartezeit kein ACK oder NAK Byte empfängt, wiederholt er auch das Senden der Nachricht. Das Senden der Nachricht wird bis zu dreimal wiederholt. Empfängt der Sender ein ACK, kann er die gesendete Nachricht aus dem Sendespeicher entfernen.

+---+        +---+
|ACK|  oder  |NAK|
+---+        +---+

ACK - Character 0b00000110 = 0x06
NAK - Character 0b00010101 = 0x15


Leere Nachricht:

+--+--+--+
|SY|AS| 0|
+--+--+--+
SY - Syncronization byte: 'Ü' = 0b10011010
AS - Address sender on bus 7bit
LE - Length of message == 0


Adressierung der Busteilnehmer:

Damit dürfen keine zwei Teilnehmer mit identischen unteren 7bits der Adresse in einem Segment liegen.
Die Adresse für Nachrichten an alle "Broadcasts" ist 0b0111 1111 1111 = 0x7FF.
Die Adresse für Nachrichten an alle Teilnehmer eines Segments ist 0b0111 1111 = 0x7F.
Der Busteilnehmer, welcher das Takten des Busses übernimmt, also der Master, hat die Adresse 1.


Routing
-------

An jeder Stelle, an welcher der Bus abzweigt kommt ein 'Router' zum Einsatz, der zwei serielle Schnittstellen besitzt. Auf dem übergeordneten Bus verhält sich der Router wie ein normaler Bus-Teilnehmer, der jedoch alle Nachrichten entgegennimmt, die sein Segment adressiert haben. Auf der anderen Seite fungiert er als Scheduler, der diese Nachrichten an die Teilnehmer in seinem Segment weiterleitet. Nachrichten aus dem Segment werden ohne Prüfung auf das übergeordnete Segment gegeben.

0
|
| seg0
|
|      seg1              Beisp: 7=[07][x1]
|
1+00-- 01----02---0	3----0	4----0	5----0	6-----07---...
|
|
|		seg2
2+00--	01----	02----	03----	...		Beisp: 27=[1B][x2]
|	+	+	+				  5=[05][x2]
|	00	00	00				 10=[0A][x2]
|	|	|	|
|	|	|	|
|	0C	0F	08+00-	-09--0A--...		Router3 zuständig für:
.	|	|	|				[03,08,09,0A,0B,1A,1B][x2]
.	|	|	|
0F	0D	11	1A+00------1B--...


Sonderfall:	Kölner Untersegmente
Da aufgrund der Infrastruktur in den Kölner Altbauten ein Struktur mit einem Hauptstamm
und max. 16(4Bit) Zweigen nicht ausreicht wird hier die Möglichkeit von Untersegmenten beschrieben:
Im Stamm bleibt alles wie oben beschrieben. Die Router in den  Zweigen nehmen jedoch alle Nachrichten
ihres Schedulers entgegen und leiten diese weiter in ihren Zweig, sofern die Adresse (7Bit) als
'belegt' geführt ist. Als 'belegt' gelten hier alle Adressen, von welchen irgendwann einmal eine
Nachricht auf den Bus gegeben wurde. Das Erkundungsverfahren entspricht dem oben genannten.
Jeder Router zählt die Anzahl der Versuche eine Nachricht zuzustellen. Wird dreimal keine Antwort
empfangen gilt diese Adresse auf dem Zweig als 'unbelegt'. Ein Teilnehmer in einem abgelegenen Zweig
sollte daher nach dem Einschalten eine "Here I am"-Nachricht als Broadcast auf den Bus schicken, damit
er einmal erkannt wird.
WICHTIG: Bei der Konfiguration dieser Untersegmente muss peinlich darauf geachtet werden, daß innerhalb
des Hauptsegmentes jede Adresse nur einmal vergeben wird.

Da aufgrund der Infrastruktur in den Kölner Altbauten ein Struktur mit einem Hauptstamm und max. 16(4Bit) Zweigen nicht ausreicht wird hier die Möglichkeit von Untersegmenten beschrieben:
Im Stamm bleibt alles wie oben beschrieben. Die Router in den  Zweigen nehmen jedoch alle Nachrichten ihres Schedulers entgegen und leiten diese weiter in ihren Zweig, sofern die Adresse (7Bit) als 'belegt' geführt ist. Als 'belegt' gelten hier alle Adressen, von welchen irgendwann einmal eine Nachricht auf den Bus gegeben wurde. Das Erkundungsverfahren entspricht dem oben genannten.
Jeder Router zählt die Anzahl der Versuche eine Nachricht zuzustellen. Wird dreimal keine Antwort empfangen gilt diese Adresse auf dem Zweig als 'unbelegt'. Ein Teilnehmer in einem abgelegenen Zweig sollte daher nach dem Einschalten eine "Here I am"-Nachricht als Broadcast auf den Bus schicken, damit er einmal erkannt wird.
WICHTIG: Bei der Konfiguration dieser Untersegmente muss peinlich darauf geachtet werden, daß innerhalb des Hauptsegmentes jede Adresse nur einmal vergeben wird.


High-Level Protocol
-------------------------------

Im High-Level Protocol sind die Formate der zu übertragenden Informationen festgelegt. Dabei wird
zwischen allgemeingültigen Befehlen und Zustandsmeldungen, sowie applikationsspezifischen Befehlen und
Zustandsmeldungen unterschieden. Befehle lösen beim Empfänger eine Aktion aus, Zustandsmeldungen
können eine Aktion auslösen, müssen aber nicht.

Allgemeine Zustandsmeldungen (Typ 0x00 - 0x10) (StateMsg)
Das Format der Nachricht und welche Eigenschaft sich hinter welchem Bit/Register verbirgt ist applikationsspezifisch. Zu jeder Applikation gehört eine Registertabelle, welche den Datentyp und den Zweck des Registers angibt.

Beispiel Registertabelle:

Reg   Type   Usage
----+-------+------------------
  0 | n/a   | reserved
  1 |  8bit | Byte 0 of Bitfield: 8 Digital inputs on connector J12
  2 | 16bit | Temperature of sensor 0
  3 | 16bit | Temperature of sensor 1
  4 | 16bit | Current desired temperature
  5 | n/a   | reserved
  6 | n/a   | reserved
  7 | n/a   | reserved


0x00 - Typenlos
0x00, Daten

0x01 - Bitfeld
Beispiel: 0x01, Anzahl Bytes, Zustand Byte0, Änderung Byte0, Zustand Byte1, Änderung Byte1, ...

0x02 - 8bit
Beispiel: 0x02, Registernummer, 8bit Wert

0x03 - 16bit
Beispiel: 0x03, Registernummer, 16bit Wert (HighByte, LowByte)

0x04 - 32bit
Beispiel: 0x04, Registernummer, 32bit Wert (HighByte, ..., LowByte)

0x05 - Datum/Uhrzeit(UTC)


Registerbefehle: Für Konfigurations- und Debugzwecke
In Registern werden Eigenschaften der Applikation hinterlegt. Zum Beispiel die Moduladresse oder andere Konfigurationsparameter.
Die Register können flüchtig oder nicht-flüchtig sein. Weiterhin können Register teilweise nur gelesen werden (Abfrage einer Version zum Beispiel). Hinter Registern können sich auch Variablen verbergen oder die oben beschriebenen Kanäle. Dies ist vor allem für Debugzwecke nützlich.
Auch hier gehört zu jeder Applikation eine Registertabelle, welche den Datentyp, den Zweck des Registers und die Zugriffs- und Speichereigenschaften angibt.

Beispiel Registertabelle:

Reg   Type    Access   Usage
----+-------+--------+---------
  0 | 16bit | (e)r/w | Module address (11bit)
  1 |  8bit | r      | Module software version

r/w:    volatile read and write access. After a power cycle the content of this register is lost.
r:      volatile read access. After a power cycle the content of this register may be lost.
(e)r/w: non-volatile read and write access. The content is stored in the internal EEProm. A write access to this register writes directly to the EEProm.

Schreibvorgänge auf Read-Only Register oder Register mit anderem Datentyp werden von der Software verhindert. Lesevorgänge auf Register mit einem anderen Datentyp sind zugelassen, liefern aber nur den lesbaren Teil des Registers zurück: Ein 32bit Lesebefehl auf ein 8bit Register gibt auch nur den 8bit Wert des Registers im untersten Byte des 32bit Wortes zurück. Ein 8bit Lesebefehk auf ein 32bit Register gibt nur das unterste Byte des 32bit Wortes zurück.

0x10 - Request Register
Beispiel: 0x10, Registernummer
Das angesprochene Modul antwortet auf den Request Register Befehl mit einer State-Message 0x02 - 0x04

0x12 - Set Register 8bit
Beispiel: 0x12, Registernummer, 8bit- Wert

0x13 - Set Register 16bit
Beispiel: 0x13, Registernummer, 16bit- Wert

0x14 - Set Register 32bit
Beispiel: 0x14, Registernummer, 32bit- Wert


Allgemeine Befehle (Typ 0x20 - 0x3F)
Format: Typ, spez. Parameter

0xXX - Request Version
Fordert Firmwareversionsstring an.

0xXX - Set Version
Gibt Firmwareversion an
Beispiel: 0xXX, <Versionsstring max 10Byte>

0x30 - Upload Firmware Start Frame 
Start Frame sendet als Antwort die aktuelle Schreibadresse, mit der der Next Frame Befehl beginnen würde.
0x31 - Upload Firmware Next Frame
Next Frame sendet als Antwort die aktuelle Schreibadresse, mit der der nächste Next Frame Befehl beginnen würde.
0x32 - Upload Firmware Last Frame
Last Frame sendet als Antwort die Schreibadresse nach Abschluss der Schreibvorgägnge und den Registerbefehl mit der CRC16 Checksumme, aus dem externen EEProm.


Steuerkommandos (Typ 0xF0 - 0xFF)
Format: Typ, spez. Parameter

0xF0 - Acknowledge message
0xF5 - Sleep (legt den Bus schlafen)
0xFE - Reset (Teilnehmer soll über Los gehen)